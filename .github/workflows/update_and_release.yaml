name: Update Manifest and Release

on:
  push:
    tags:
      - 'v*.*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Extract version number from tag
      id: extract_version
      run: |
        if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          echo "VERSION_PARTS=${BASH_REMATCH[3]}.${BASH_REMATCH[4]}" >> $GITHUB_ENV
          echo "VERSION_NAME=v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.${BASH_REMATCH[4]}" >> $GITHUB_ENV
          echo "Found version: ${VERSION_PARTS}"
        else
          echo "Tag format is invalid!"
          exit 1
        fi

    - name: Update version in salutation manifest
      run: |
        if [[ -z "${VERSION_PARTS}" ]]; then
          echo "VERSION_PARTS not set. Exiting."
          exit 1
        fi
        sed -i "s/^\(\s*'version':\s*'\)[0-9.]*\('.*\)$/\1${VERSION_PARTS}\2/" salutation/__manifest__.py

    - name: Update version in salutation_marketing manifest
      run: |
        if [[ -z "${VERSION_PARTS}" ]]; then
          echo "VERSION_PARTS not set. Exiting."
          exit 1
        fi
        sed -i "s/^\(\s*'version':\s*'\)[0-9.]*\('.*\)$/\1${VERSION_PARTS}\2/" salutation_marketing/__manifest__.py

    - name: Create salutation.zip
      run: |
        if [[ ! -d "salutation" ]]; then
          echo "Salutation directory does not exist. Exiting."
          exit 1
        fi
        cd salutation
        zip -r ../salutation.zip .
        cd ..

    - name: Create salutation_marketing.zip
      run: |
        if [[ ! -d "salutation_marketing" ]]; then
          echo "Salutation marketing directory does not exist. Exiting."
          exit 1
        fi
        cd salutation_marketing
        zip -r ../salutation_marketing.zip .
        cd ..

    - name: Upload salutation.zip
      uses: actions/upload-artifact@v3
      with:
        name: salutation.zip
        path: salutation.zip

    - name: Upload salutation_marketing.zip
      uses: actions/upload-artifact@v3
      with:
        name: salutation_marketing.zip
        path: salutation_marketing.zip
      
    - name: Create GitHub Release
      id: create_release
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const version = process.env.VERSION_NAME;
          if (!version) {
            throw new Error("VERSION_NAME environment variable not set.");
          }
          const releaseResponse = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: version,
            name: `Release ${version}`,
            body: `Release for version ${version}.`,
            draft: false,
            prerelease: false
          });
          core.setOutput('upload_url', releaseResponse.data.upload_url);

    - name: Upload assets to release
      uses: actions/github-script@v6
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const fs = require('fs');
          const uploadUrl = core.getInput('upload_url');
          if (!uploadUrl) {
            throw new Error("Upload URL not set.");
          }

          const uploadAsset = async (filePath, fileName) => {
            if (!fs.existsSync(filePath)) {
              throw new Error(`${filePath} does not exist.`);
            }

            const fileBuffer = fs.readFileSync(filePath);
            await github.rest.repos.uploadReleaseAsset({
              url: uploadUrl,
              headers: {
                'content-length': fileBuffer.length,
                'content-type': 'application/zip'
              },
              name: fileName,
              data: fileBuffer
            });
          };

          try {
            await uploadAsset('salutation.zip', 'salutation.zip');
            await uploadAsset('salutation_marketing.zip', 'salutation_marketing.zip');
          } catch (error) {
            core.setFailed(`Asset upload failed: ${error.message}`);
          }
