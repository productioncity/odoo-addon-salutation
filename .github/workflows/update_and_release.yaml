name: Update Manifest and Release

on:
  push:
    tags:
      - 'v*.*.*.*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Extract version number from tag
      id: extract_version
      run: |
        if [[ "${GITHUB_REF}" =~ ^refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
          echo "VERSION_PARTS=${BASH_REMATCH[3]}.${BASH_REMATCH[4]}" >> $GITHUB_ENV
          echo "VERSION_NAME=v${BASH_REMATCH[1]}.${BASH_REMATCH[2]}.${BASH_REMATCH[3]}.${BASH_REMATCH[4]}" >> $GITHUB_ENV
          echo "Found version: ${VERSION_PARTS}"
        else
          echo "Tag format is invalid!"
          exit 1
        fi

    - name: Update version in salutation manifest
      run: |
        set -e
        echo "Updating version in salutation manifest..."
        sed -i "s/^\(\s*'version':\s*'\)[0-9.]*\('.*\)$/\1${VERSION_PARTS}\2/" salutation/__manifest__.py || {
          echo "Failed to update version in salutation manifest!"
          exit 1
        }

    - name: Update version in salutation_marketing manifest
      run: |
        set -e
        echo "Updating version in salutation_marketing manifest..."
        sed -i "s/^\(\s*'version':\s*'\)[0-9.]*\('.*\)$/\1${VERSION_PARTS}\2/" salutation_marketing/__manifest__.py || {
          echo "Failed to update version in salutation_marketing manifest!"
          exit 1
        }

    - name: Create salutation.zip
      run: |
        set -e
        echo "Creating salutation.zip..."
        zip -r salutation.zip salutation || { 
          echo "Failed to create salutation.zip!"; 
          exit 1; 
        }

    - name: Create salutation_marketing.zip
      run: |
        set -e
        echo "Creating salutation_marketing.zip..."
        zip -r salutation_marketing.zip salutation_marketing || { 
          echo "Failed to create salutation_marketing.zip!"; 
          exit 1; 
        }

    - name: Check zip files
      run: |
        set -e
        if [[ ! -f "salutation.zip" ]] || [[ ! -f "salutation_marketing.zip" ]]; then
          echo "One or both zip files are missing!"
          exit 1
        fi

    - name: Upload salutation.zip
      uses: actions/upload-artifact@v4
      with:
        name: salutation.zip
        path: salutation.zip

    - name: Upload salutation_marketing.zip
      uses: actions/upload-artifact@v4
      with:
        name: salutation_marketing.zip
        path: salutation_marketing.zip

    - name: Create GitHub Release
      id: create_release
      uses: actions/github-script@v6
      with:
        script: |
          const version = process.env.VERSION_NAME;
          console.log("Creating release for version:", version);
          const releaseResponse = await github.rest.repos.createRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: version,
            name: `Release ${version}`,
            body: `Release for version ${version}.`,
            draft: false,
            prerelease: false
          });
          console.log("Release created:", releaseResponse.data);
          core.setOutput('upload_url', releaseResponse.data.upload_url);

    - name: Upload assets to release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
      run: |
        set -e
        if [[ -z "${UPLOAD_URL}" ]]; then
          echo "Error: Upload URL not set!"
          exit 1
        fi

        echo "Uploading assets to release URL: ${UPLOAD_URL}"

        if [[ ! -f "salutation.zip" ]] || [[ ! -f "salutation_marketing.zip" ]]; then
          echo "Error: One or both zip files are missing!"
          exit 1
        fi

        echo "Both zip files found. Proceeding with upload..."

    - name: Perform Upload
      env:
        UPLOAD_URL: ${{ steps.create_release.outputs.upload_url }}
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const uploadUrl = process.env.UPLOAD_URL;

          if (!uploadUrl) {
            core.setFailed("Error: Upload URL not set!");
            process.exit(1);
          } else {
            console.log("Upload URL:", uploadUrl);
          }
          
          for (const file of ["salutation.zip", "salutation_marketing.zip"]) {
            const filePath = path.join(process.cwd(), file);
            if (!fs.existsSync(filePath)) {
              core.setFailed(`File not found: ${file}`);
              process.exit(1);
            }
            const fileBuffer = fs.readFileSync(filePath);
            try {
              await github.rest.repos.uploadReleaseAsset({
                url: uploadUrl,
                headers: {
                  'content-length': fileBuffer.length,
                  'content-type': 'application/zip'
                },
                name: file,
                data: fileBuffer
              });
              console.log(`Successfully uploaded ${file}`);
            } catch (error) {
              core.setFailed(`Failed to upload ${file}: ${error.message}`);
              process.exit(1);
            }
          }